
body common control {
        bundlesequence => { "main" };
}

body file control
{
        inputs => {
                    "$(sys.libdir)/stdlib.cf",
                    "/home/olepor/misc/learn/cfe/mendersoftwaresync.cf", # git fetch, and config management
        };
}

# TODO -- How to get the private repositories
bundle agent main {

  classes:
      "is_repos" expression => isvariable( "repos_intersection" );

  vars:

      # Path to mendersoftware repository
      "location" string => "/home/olepor/mendersoftware/";

      "repos_intersection" slist => intersection( "getmenderrepos.mendersoftware_mender_repos", "getmenderrepos.oleorhagen_mender_repos" );

      # mendersoftware git config
      "git_config[$(repos_intersection)][remote \"mendersoftware\"][url]" string => "git@github.com:mendersoftware/$(repos_intersection).git";
      "git_config[$(repos_intersection)][remote \"mendersoftware\"][fetch]" string => "+refs/heads/*:refs/remotes/mendersoftware/*";
      "git_config[$(repos_intersection)][remote \"mendersoftware\"][push]" string => "noPushUpstream";

      # personal git config
      "git_config[$(repos_intersection)][remote \"oleorhagen\"][url]" string => "git@github.com:oleorhagen/$(repos_intersection).git";
      "git_config[$(repos_intersection)][remote \"oleorhagen\"][fetch]" string => "+refs/heads/*:refs/remotes/oleorhagen/*";


  methods:

      "get all mendersoftware repositories" usebundle => getmenderrepos("mendersoftware",
                                                "https://api.github.com/orgs/mendersoftware/repos");

      "get all oleorhagen repositories" usebundle => getmenderrepos("oleorhagen",
                                                     "https://api.github.com/users/oleorhagen/repos");

    is_repos::
      "clone a repo locally, if it does not already exist"
        usebundle => git_clone( $(location), "$(repos_intersection)" );

      "fetch all remote updates"
        usebundle => git_fetch_all("$(location)$(repos_intersection)"),
        classes => if_notkept("$(repos)_failed"),
        action => if_elapsed("60");

  files:

      # add mendersoftware remote mendersoftware repos

    is_repos::

      "$(location)$(repos_intersection)/.git/config"
        edit_line => manage_variable_values_ini("main.git_config[$(repos_intersection)]", "remote \"mendersoftware\"");

      # add oleorhagen remote to user repos

    is_repos::

      "$(location)$(repos_intersection)/.git/config"
        edit_line => manage_variable_values_ini("main.git_config[$(repos_intersection)]", "remote \"oleorhagen\"");


  reports:
    is_repos::
      "repos_intersection is now defined";


      "$(this.bundle): Ran main...";
      "$(this.bundle): menderepos: $(getmenderrepos.mendersoftware_json_response[$(getmenderrepos.jri)][name])";

      "$(this.bundle): menderrepos_list: $(getmenderrepos.mendersoftware_mender_repos)";

      "$(this.bundle): intersection: $(repos_intersection)";


}


bundle agent getmenderrepos(name, url) {

  vars:

      "github_outh_access_token" string => readfile("/home/olepor/.secrets/github_access_token", 50);

      "options_str" string => '
{
  "url.max_content": 1832960,
  "url.verbose": 0,
  "url.user-agent": "cf-agent",
  "url.headers": [ "Authorization: token $(github_outh_access_token)" ]
}';
      "options" data => parsejson( $(options_str) );
      # "url" string => "https://api.github.com/orgs/mendersoftware/repos";
      "response" data => url_get( $(url), options );
      "out" string => format("%S", response);

      "$(name)_json_response" data => parsejson( "$(response[content])" );

      # Get the indices for the returned object list
      "jri" slist => getindices( "$(name)_json_response" );

      "repo_name" string => "$($(name)_json_response[$(jri)][name])";

      "mender_array[$($(name)_json_response[$(jri)][name])]" string => "$($(name)_json_response[$(jri)][name])";

      "$(name)_mender_repos" slist => getvalues( mender_array );

  reports:
      "$(this.bundle): github_access_token: $(github_oath_access_token)";
      "$(this.bundle): repo_name: $(repo_name)";
      "$(this.bundle): repository names for $(name): $($(name)_json_response[$(jri)][name])";
      "$(this.bundle): mender_list: $(mender_repos)";

      # "$(this.bundle): repos: $(menderrepos_names)";
}

