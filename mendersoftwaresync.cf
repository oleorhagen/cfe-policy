body common control {
        bundlesequence => { "mendersoftware" };
}

body file control
{
        inputs => { "$(sys.libdir)/files.cf", "$(sys.libdir)/packages.cf" };
}

# Clone all repositories from the mendersoftware organization at
# github.com/mendersoftware
# with privileges of the current client.
#
# If the remotes are already existing, do git fetch --all
# to update the remotes.
#
# Also add a .gitconfig file to each repository, with some special
# configuration to make PR's a part of the fetch command
bundle agent mendersoftware {

      # 1. get all the repositories in mendersoftware
      # TODO -- Currently hardcoded.
      # 2. Rename the upstream remote to mendersoftware
      # 3. Add the custom gitconfig
      # 4. fetch --all
  vars:
      # All the repositories to control
      "repos" slist => {
                        # Client repositores
                        "mender",
                        "mender-artifact",
                        "meta-mender",
                        "mendertesting",
                        "mender-qa",
                        "mender-binary-delta",

                        # Backend repositories
                        "deployments",
                        "deployments-enterprise",
                        "deviceadm",
                        "deviceauth",
                         "mender-backend-cli",
      };

      # Path to mendersoftware repository
      "location" string => "/home/olepor/mendersoftware/";

      # The upstreams to control
      "remotes" slist => { "mendersoftware", "oleorhagen" };


      "mendersoftware_section_template[mendersoftware][$(repos)]" string => "\
    $(const.t)url = git@github.com:mendersoftware/$(repos).git
    $(const.t)fetch = +refs/heads/*:refs/remotes/mendersoftware/*
    $(const.t)push=noPushUpstream";

      "mendersoftware_section_template[oleorhagen][$(repos)]" string => "\
    $(const.t)url = git@github.com:oleorhagen/$(repos).git
    $(const.t)fetch = +refs/heads/*:refs/remotes/oleorhagen/*";

  files:
      "$(location)$(repos)/.git/config"
        edit_line => git_config_section_replace("$(remotes)", "$(mendersoftware_section_template[$(remotes)][$(repos)])");

  methods:
      "/usr/bin/git fetch --all" # Update all remotes
        usebundle => git_fetch_all("$(location)$(repos)");

}

bundle agent git_fetch_all(where)
{

  commands:
      "/usr/bin/git"
        args => "fetch --all",
        contain => in_dir("$(where)");

}

body contain in_dir(dir)
{
        chdir => "$(dir)";
}


bundle edit_line git_config_section_replace(sectionName, newSectionString)
{
      # Replace an ini section in a git-config file
  delete_lines:
      ".*"
        select_region => git_config_section_region("$(sectionName)"),
        comment       => "Remove all entries in the region so there are no extra entries";

  insert_lines:
      "[remote \"$(sectionName)\"]"
        location => start,
        comment => "Insert lines";

      "$(newSectionString)"
        location => first_git_config_section_line("$(sectionName)"),
        select_region => git_config_section_region("$(sectionName)"),
        comment => "Insert the section variables";

  reports:
      "sectionName: $(sectionName)";
      # "newSectionString $(newSectionString)";
}

body select_region git_config_section_region(x)
{
        select_start => "\[remote \"$(x)\"\]";
        select_end => "\[.*\]";
}

body location first_git_config_section_line(x)
{
        before_after => "after";
        first_last => "first";
        select_line_matching => "\[remote \"$(x)\"\]";

}


# bundle edit_line git_is_renamed(dir, remote)
# {
#   replace_patterns:
#         replace_with => git_remote_name("$(remote)"),
#         select_region => git_remote_section("$(remote)");
# }

# bundle agent outerbundle
# {
#   files:

#       "/home/mark/tmp/cf3_test"
#         create    => "true",     # Like autocreate in cf2
#         edit_line => inner_bundle;
# }

# bundle edit_line git_rename_remote(old_name, new_name)
# {
#   vars:

#       "who" string => "SysAdmin John"; # private variable in bundle

#   insert_lines:
#       "/* This file is maintained by CFEngine (see $(who) for details) */",
#         location => first_line;

#   replace_patterns:
#       # Replace the [remote "origin"]

#       "\[remote $(old_name)\]"
#         replace_with => git_new_remote_name,
#         select_region => MySection("\[remote \\$(old_name)\"\]");

#   reports:
#       "This is file $(edit.filename)";
# 

# body replace_with git_new_remote_name(new_name)
# {
#         replace_value => "\[remote \"$(new_name)\"\]";
#         occurrences => "all";          # first, last all
# }

# body select_region MySection(x)
# {
#         select_start => "\[$(x)\]";
#         select_end => "\[.*\]";
# }

# body location first_line
# {
#         before_after => "before";
#         first_last => "first";
#         select_line_matching => ".*";
# }

